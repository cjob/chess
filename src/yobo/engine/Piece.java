package yobo.engine;

/**
 * Created by IntelliJ IDEA.
 * User: Christophe Job
 * Date: Feb 21, 2004
 * Time: 4:12:37 PM
 * To change this template use File | Settings | File Templates.
 */
public final class Piece {



    byte moves[][][];
    boolean computerPiece;
    int value;
    String name;
    public int imageIndex;

    Piece(byte type[][][], boolean computer, int v, int i) {
        moves = type;
        computerPiece = computer;
        value = v;
        if (!computer)
            value = -value;
        imageIndex = i;
    };

    public static Piece getPiecebyID(int i)
    {
        switch (i) {
            case 6: return CPawn;
            case 9: return CTower;
            case 8: return CBishop;
            case 7: return CKnight;
            case 10: return CQueen;
            case 11: return CKing;
            case 0: return OPawn;
            case 3: return OTower;
            case 2: return OBishop;
            case 1: return OKnight;
            case 4: return OQueen;
            case 5: return OKing;
        }
        return null;
    }

    public int getValue()
    {
        return value;
    };

    public String getName()
    {
        return name;
    };

    public static int getMoveArray(byte moveArray[], Piece board[], boolean computer) {
        int moveCount=0;
        int boardPosition;
        int currentDirection;
        int currentIndex;
        Piece currentPiece;
        byte currentPiecemoves[][];
        byte currentPiecemovesDirection[];

        for ( boardPosition = 0; boardPosition <64 ; boardPosition++ )
        {
           currentPiece = board[boardPosition];
           // if it is a piece and a piece that we are going to play
           if (currentPiece != null)
               if (currentPiece.computerPiece == computer)
               {
                   // if it is not pawn
                   if ((currentPiece.moves != ComputerPawnmoves) &&
                       (currentPiece.moves != OpponentPawnmoves))

                   {
                       currentPiecemoves = currentPiece.moves[boardPosition];
                       for(currentDirection=0; currentDirection < currentPiecemoves.length; currentDirection++)
                       {
                           currentPiecemovesDirection = currentPiece.moves[boardPosition][currentDirection];
                           for( currentIndex=0; currentIndex < currentPiecemovesDirection.length ; currentIndex++)
                           {
                               // the target is empty
                               if (board[currentPiecemovesDirection[currentIndex]] == null)
                               {
                                   // add the target to the list
                                   moveArray[moveCount++] = (byte) boardPosition;
                                   moveArray[moveCount++] = currentPiecemovesDirection[currentIndex];
                               } else
                               // the target is an opponent piece, we take it and stop looking in that direction
                               if (board[currentPiecemovesDirection[currentIndex]].computerPiece != computer)
                               {
                                   // add the target to the list, starting with the initial position
                                   moveArray[moveCount++] = (byte) boardPosition;
                                   moveArray[moveCount++] = currentPiecemovesDirection[currentIndex];
                                   // exit the loop
                                   break;
                               }  else
                                   // the target is a friendly piece
                                   break;
                           }
                       }
                   } else // this is a pawn
                   {
                       for(currentDirection=0; currentDirection < 2; currentDirection++)
                       {
                           currentPiecemovesDirection = currentPiece.moves[boardPosition][currentDirection];
                           // This is Pawn we are going to play, the first 4 direction are "take" directions
                           if (currentPiecemovesDirection.length !=0)
                           {
                               // first index we have to take an opponet piece
                               if (board[currentPiecemovesDirection[0]] != null)
                               if (board[currentPiecemovesDirection[0]].computerPiece != computer)
                               {
                                   moveArray[moveCount++] = (byte) boardPosition;
                                   moveArray[moveCount++] = currentPiecemovesDirection[0];

                               }
                           }
                       }

                       for( ; currentDirection < 4; currentDirection++)
                       {
                           currentPiecemovesDirection = currentPiece.moves[boardPosition][currentDirection];
                           if (currentPiecemovesDirection.length !=0)
                           {
                               // the destination has to be empty
                               if (board[currentPiecemovesDirection[0]] == null)
                               {
                                   moveArray[moveCount++] = (byte) boardPosition;
                                   moveArray[moveCount++] = currentPiecemovesDirection[0];

                               } else
                               // we cannot jump over one of our pawns
                                   break;
                           }
                       }

                   }

               }
        } // for loop on the board

        return moveCount;

    };

    private static byte Towermoves[][][] = {
    /* Position 0 */{{8,16,24,32,40,48,56},{1,2,3,4,5,6,7},{},{}}
    /* Position 1 */,{{9,17,25,33,41,49,57},{2,3,4,5,6,7},{},{0}}
    /* Position 2 */,{{10,18,26,34,42,50,58},{3,4,5,6,7},{},{1,0}}
    /* Position 3 */,{{11,19,27,35,43,51,59},{4,5,6,7},{},{2,1,0}}
    /* Position 4 */,{{12,20,28,36,44,52,60},{5,6,7},{},{3,2,1,0}}
    /* Position 5 */,{{13,21,29,37,45,53,61},{6,7},{},{4,3,2,1,0}}
    /* Position 6 */,{{14,22,30,38,46,54,62},{7},{},{5,4,3,2,1,0}}
    /* Position 7 */,{{15,23,31,39,47,55,63},{},{},{6,5,4,3,2,1,0}}
    /* Position 8 */,{{16,24,32,40,48,56},{9,10,11,12,13,14,15},{0},{}}
    /* Position 9 */,{{17,25,33,41,49,57},{10,11,12,13,14,15},{1},{8}}
    /* Position 10 */,{{18,26,34,42,50,58},{11,12,13,14,15},{2},{9,8}}
    /* Position 11 */,{{19,27,35,43,51,59},{12,13,14,15},{3},{10,9,8}}
    /* Position 12 */,{{20,28,36,44,52,60},{13,14,15},{4},{11,10,9,8}}
    /* Position 13 */,{{21,29,37,45,53,61},{14,15},{5},{12,11,10,9,8}}
    /* Position 14 */,{{22,30,38,46,54,62},{15},{6},{13,12,11,10,9,8}}
    /* Position 15 */,{{23,31,39,47,55,63},{},{7},{14,13,12,11,10,9,8}}
    /* Position 16 */,{{24,32,40,48,56},{17,18,19,20,21,22,23},{8,0},{}}
    /* Position 17 */,{{25,33,41,49,57},{18,19,20,21,22,23},{9,1},{16}}
    /* Position 18 */,{{26,34,42,50,58},{19,20,21,22,23},{10,2},{17,16}}
    /* Position 19 */,{{27,35,43,51,59},{20,21,22,23},{11,3},{18,17,16}}
    /* Position 20 */,{{28,36,44,52,60},{21,22,23},{12,4},{19,18,17,16}}
    /* Position 21 */,{{29,37,45,53,61},{22,23},{13,5},{20,19,18,17,16}}
    /* Position 22 */,{{30,38,46,54,62},{23},{14,6},{21,20,19,18,17,16}}
    /* Position 23 */,{{31,39,47,55,63},{},{15,7},{22,21,20,19,18,17,16}}
    /* Position 24 */,{{32,40,48,56},{25,26,27,28,29,30,31},{16,8,0},{}}
    /* Position 25 */,{{33,41,49,57},{26,27,28,29,30,31},{17,9,1},{24}}
    /* Position 26 */,{{34,42,50,58},{27,28,29,30,31},{18,10,2},{25,24}}
    /* Position 27 */,{{35,43,51,59},{28,29,30,31},{19,11,3},{26,25,24}}
    /* Position 28 */,{{36,44,52,60},{29,30,31},{20,12,4},{27,26,25,24}}
    /* Position 29 */,{{37,45,53,61},{30,31},{21,13,5},{28,27,26,25,24}}
    /* Position 30 */,{{38,46,54,62},{31},{22,14,6},{29,28,27,26,25,24}}
    /* Position 31 */,{{39,47,55,63},{},{23,15,7},{30,29,28,27,26,25,24}}
    /* Position 32 */,{{40,48,56},{33,34,35,36,37,38,39},{24,16,8,0},{}}
    /* Position 33 */,{{41,49,57},{34,35,36,37,38,39},{25,17,9,1},{32}}
    /* Position 34 */,{{42,50,58},{35,36,37,38,39},{26,18,10,2},{33,32}}
    /* Position 35 */,{{43,51,59},{36,37,38,39},{27,19,11,3},{34,33,32}}
    /* Position 36 */,{{44,52,60},{37,38,39},{28,20,12,4},{35,34,33,32}}
    /* Position 37 */,{{45,53,61},{38,39},{29,21,13,5},{36,35,34,33,32}}
    /* Position 38 */,{{46,54,62},{39},{30,22,14,6},{37,36,35,34,33,32}}
    /* Position 39 */,{{47,55,63},{},{31,23,15,7},{38,37,36,35,34,33,32}}
    /* Position 40 */,{{48,56},{41,42,43,44,45,46,47},{32,24,16,8,0},{}}
    /* Position 41 */,{{49,57},{42,43,44,45,46,47},{33,25,17,9,1},{40}}
    /* Position 42 */,{{50,58},{43,44,45,46,47},{34,26,18,10,2},{41,40}}
    /* Position 43 */,{{51,59},{44,45,46,47},{35,27,19,11,3},{42,41,40}}
    /* Position 44 */,{{52,60},{45,46,47},{36,28,20,12,4},{43,42,41,40}}
    /* Position 45 */,{{53,61},{46,47},{37,29,21,13,5},{44,43,42,41,40}}
    /* Position 46 */,{{54,62},{47},{38,30,22,14,6},{45,44,43,42,41,40}}
    /* Position 47 */,{{55,63},{},{39,31,23,15,7},{46,45,44,43,42,41,40}}
    /* Position 48 */,{{56},{49,50,51,52,53,54,55},{40,32,24,16,8,0},{}}
    /* Position 49 */,{{57},{50,51,52,53,54,55},{41,33,25,17,9,1},{48}}
    /* Position 50 */,{{58},{51,52,53,54,55},{42,34,26,18,10,2},{49,48}}
    /* Position 51 */,{{59},{52,53,54,55},{43,35,27,19,11,3},{50,49,48}}
    /* Position 52 */,{{60},{53,54,55},{44,36,28,20,12,4},{51,50,49,48}}
    /* Position 53 */,{{61},{54,55},{45,37,29,21,13,5},{52,51,50,49,48}}
    /* Position 54 */,{{62},{55},{46,38,30,22,14,6},{53,52,51,50,49,48}}
    /* Position 55 */,{{63},{},{47,39,31,23,15,7},{54,53,52,51,50,49,48}}
    /* Position 56 */,{{},{57,58,59,60,61,62,63},{48,40,32,24,16,8,0},{}}
    /* Position 57 */,{{},{58,59,60,61,62,63},{49,41,33,25,17,9,1},{56}}
    /* Position 58 */,{{},{59,60,61,62,63},{50,42,34,26,18,10,2},{57,56}}
    /* Position 59 */,{{},{60,61,62,63},{51,43,35,27,19,11,3},{58,57,56}}
    /* Position 60 */,{{},{61,62,63},{52,44,36,28,20,12,4},{59,58,57,56}}
    /* Position 61 */,{{},{62,63},{53,45,37,29,21,13,5},{60,59,58,57,56}}
    /* Position 62 */,{{},{63},{54,46,38,30,22,14,6},{61,60,59,58,57,56}}
    /* Position 63 */,{{},{},{55,47,39,31,23,15,7},{62,61,60,59,58,57,56}}
    };
    private static byte ComputerPawnmoves[][][] = {
    /* Position 0 */{{},{9},{8},{}}
    /* Position 1 */,{{8},{10},{9},{}}
    /* Position 2 */,{{9},{11},{10},{}}
    /* Position 3 */,{{10},{12},{11},{}}
    /* Position 4 */,{{11},{13},{12},{}}
    /* Position 5 */,{{12},{14},{13},{}}
    /* Position 6 */,{{13},{15},{14},{}}
    /* Position 7 */,{{14},{},{15},{}}
    /* Position 8 */,{{},{17},{16},{24}}
    /* Position 9 */,{{16},{18},{17},{25}}
    /* Position 10 */,{{17},{19},{18},{26}}
    /* Position 11 */,{{18},{20},{19},{27}}
    /* Position 12 */,{{19},{21},{20},{28}}
    /* Position 13 */,{{20},{22},{21},{29}}
    /* Position 14 */,{{21},{23},{22},{30}}
    /* Position 15 */,{{22},{},{23},{31}}
    /* Position 16 */,{{},{25},{24},{}}
    /* Position 17 */,{{24},{26},{25},{}}
    /* Position 18 */,{{25},{27},{26},{}}
    /* Position 19 */,{{26},{28},{27},{}}
    /* Position 20 */,{{27},{29},{28},{}}
    /* Position 21 */,{{28},{30},{29},{}}
    /* Position 22 */,{{29},{31},{30},{}}
    /* Position 23 */,{{30},{},{31},{}}
    /* Position 24 */,{{},{33},{32},{}}
    /* Position 25 */,{{32},{34},{33},{}}
    /* Position 26 */,{{33},{35},{34},{}}
    /* Position 27 */,{{34},{36},{35},{}}
    /* Position 28 */,{{35},{37},{36},{}}
    /* Position 29 */,{{36},{38},{37},{}}
    /* Position 30 */,{{37},{39},{38},{}}
    /* Position 31 */,{{38},{},{39},{}}
    /* Position 32 */,{{},{41},{40},{}}
    /* Position 33 */,{{40},{42},{41},{}}
    /* Position 34 */,{{41},{43},{42},{}}
    /* Position 35 */,{{42},{44},{43},{}}
    /* Position 36 */,{{43},{45},{44},{}}
    /* Position 37 */,{{44},{46},{45},{}}
    /* Position 38 */,{{45},{47},{46},{}}
    /* Position 39 */,{{46},{},{47},{}}
    /* Position 40 */,{{},{49},{48},{}}
    /* Position 41 */,{{48},{50},{49},{}}
    /* Position 42 */,{{49},{51},{50},{}}
    /* Position 43 */,{{50},{52},{51},{}}
    /* Position 44 */,{{51},{53},{52},{}}
    /* Position 45 */,{{52},{54},{53},{}}
    /* Position 46 */,{{53},{55},{54},{}}
    /* Position 47 */,{{54},{},{55},{}}
    /* Position 48 */,{{},{57},{56},{}}
    /* Position 49 */,{{56},{58},{57},{}}
    /* Position 50 */,{{57},{59},{58},{}}
    /* Position 51 */,{{58},{60},{59},{}}
    /* Position 52 */,{{59},{61},{60},{}}
    /* Position 53 */,{{60},{62},{61},{}}
    /* Position 54 */,{{61},{63},{62},{}}
    /* Position 55 */,{{62},{},{63},{}}
    /* Position 56 */,{{},{},{},{}}
    /* Position 57 */,{{},{},{},{}}
    /* Position 58 */,{{},{},{},{}}
    /* Position 59 */,{{},{},{},{}}
    /* Position 60 */,{{},{},{},{}}
    /* Position 61 */,{{},{},{},{}}
    /* Position 62 */,{{},{},{},{}}
    /* Position 63 */,{{},{},{},{}}
    };
    private static byte OpponentPawnmoves[][][] = {
    /* Position 0 */{{},{},{},{}}
    /* Position 1 */,{{},{},{},{}}
    /* Position 2 */,{{},{},{},{}}
    /* Position 3 */,{{},{},{},{}}
    /* Position 4 */,{{},{},{},{}}
    /* Position 5 */,{{},{},{},{}}
    /* Position 6 */,{{},{},{},{}}
    /* Position 7 */,{{},{},{},{}}
    /* Position 8 */,{{},{1},{0},{}}
    /* Position 9 */,{{0},{2},{1},{}}
    /* Position 10 */,{{1},{3},{2},{}}
    /* Position 11 */,{{2},{4},{3},{}}
    /* Position 12 */,{{3},{5},{4},{}}
    /* Position 13 */,{{4},{6},{5},{}}
    /* Position 14 */,{{5},{7},{6},{}}
    /* Position 15 */,{{6},{},{7},{}}
    /* Position 16 */,{{},{9},{8},{}}
    /* Position 17 */,{{8},{10},{9},{}}
    /* Position 18 */,{{9},{11},{10},{}}
    /* Position 19 */,{{10},{12},{11},{}}
    /* Position 20 */,{{11},{13},{12},{}}
    /* Position 21 */,{{12},{14},{13},{}}
    /* Position 22 */,{{13},{15},{14},{}}
    /* Position 23 */,{{14},{},{15},{}}
    /* Position 24 */,{{},{17},{16},{}}
    /* Position 25 */,{{16},{18},{17},{}}
    /* Position 26 */,{{17},{19},{18},{}}
    /* Position 27 */,{{18},{20},{19},{}}
    /* Position 28 */,{{19},{21},{20},{}}
    /* Position 29 */,{{20},{22},{21},{}}
    /* Position 30 */,{{21},{23},{22},{}}
    /* Position 31 */,{{22},{},{23},{}}
    /* Position 32 */,{{},{25},{24},{}}
    /* Position 33 */,{{24},{26},{25},{}}
    /* Position 34 */,{{25},{27},{26},{}}
    /* Position 35 */,{{26},{28},{27},{}}
    /* Position 36 */,{{27},{29},{28},{}}
    /* Position 37 */,{{28},{30},{29},{}}
    /* Position 38 */,{{29},{31},{30},{}}
    /* Position 39 */,{{30},{},{31},{}}
    /* Position 40 */,{{},{33},{32},{}}
    /* Position 41 */,{{32},{34},{33},{}}
    /* Position 42 */,{{33},{35},{34},{}}
    /* Position 43 */,{{34},{36},{35},{}}
    /* Position 44 */,{{35},{37},{36},{}}
    /* Position 45 */,{{36},{38},{37},{}}
    /* Position 46 */,{{37},{39},{38},{}}
    /* Position 47 */,{{38},{},{39},{}}
    /* Position 48 */,{{},{41},{40},{32}}
    /* Position 49 */,{{40},{42},{41},{33}}
    /* Position 50 */,{{41},{43},{42},{34}}
    /* Position 51 */,{{42},{44},{43},{35}}
    /* Position 52 */,{{43},{45},{44},{36}}
    /* Position 53 */,{{44},{46},{45},{37}}
    /* Position 54 */,{{45},{47},{46},{38}}
    /* Position 55 */,{{46},{},{47},{39}}
    /* Position 56 */,{{},{49},{48},{}}
    /* Position 57 */,{{48},{50},{49},{}}
    /* Position 58 */,{{49},{51},{50},{}}
    /* Position 59 */,{{50},{52},{51},{}}
    /* Position 60 */,{{51},{53},{52},{}}
    /* Position 61 */,{{52},{54},{53},{}}
    /* Position 62 */,{{53},{55},{54},{}}
    /* Position 63 */,{{54},{},{55},{}}
    };
    private static byte Bishopmoves[][][] = {
    /* Position 0 */{{9,18,27,36,45,54,63},{},{},{}}
    /* Position 1 */,{{10,19,28,37,46,55},{},{},{8}}
    /* Position 2 */,{{11,20,29,38,47},{},{},{9,16}}
    /* Position 3 */,{{12,21,30,39},{},{},{10,17,24}}
    /* Position 4 */,{{13,22,31},{},{},{11,18,25,32}}
    /* Position 5 */,{{14,23},{},{},{12,19,26,33,40}}
    /* Position 6 */,{{15},{},{},{13,20,27,34,41,48}}
    /* Position 7 */,{{},{},{},{14,21,28,35,42,49,56}}
    /* Position 8 */,{{17,26,35,44,53,62},{1},{},{}}
    /* Position 9 */,{{18,27,36,45,54,63},{2},{0},{16}}
    /* Position 10 */,{{19,28,37,46,55},{3},{1},{17,24}}
    /* Position 11 */,{{20,29,38,47},{4},{2},{18,25,32}}
    /* Position 12 */,{{21,30,39},{5},{3},{19,26,33,40}}
    /* Position 13 */,{{22,31},{6},{4},{20,27,34,41,48}}
    /* Position 14 */,{{23},{7},{5},{21,28,35,42,49,56}}
    /* Position 15 */,{{},{},{6},{22,29,36,43,50,57}}
    /* Position 16 */,{{25,34,43,52,61},{9,2},{},{}}
    /* Position 17 */,{{26,35,44,53,62},{10,3},{8},{24}}
    /* Position 18 */,{{27,36,45,54,63},{11,4},{9,0},{25,32}}
    /* Position 19 */,{{28,37,46,55},{12,5},{10,1},{26,33,40}}
    /* Position 20 */,{{29,38,47},{13,6},{11,2},{27,34,41,48}}
    /* Position 21 */,{{30,39},{14,7},{12,3},{28,35,42,49,56}}
    /* Position 22 */,{{31},{15},{13,4},{29,36,43,50,57}}
    /* Position 23 */,{{},{},{14,5},{30,37,44,51,58}}
    /* Position 24 */,{{33,42,51,60},{17,10,3},{},{}}
    /* Position 25 */,{{34,43,52,61},{18,11,4},{16},{32}}
    /* Position 26 */,{{35,44,53,62},{19,12,5},{17,8},{33,40}}
    /* Position 27 */,{{36,45,54,63},{20,13,6},{18,9,0},{34,41,48}}
    /* Position 28 */,{{37,46,55},{21,14,7},{19,10,1},{35,42,49,56}}
    /* Position 29 */,{{38,47},{22,15},{20,11,2},{36,43,50,57}}
    /* Position 30 */,{{39},{23},{21,12,3},{37,44,51,58}}
    /* Position 31 */,{{},{},{22,13,4},{38,45,52,59}}
    /* Position 32 */,{{41,50,59},{25,18,11,4},{},{}}
    /* Position 33 */,{{42,51,60},{26,19,12,5},{24},{40}}
    /* Position 34 */,{{43,52,61},{27,20,13,6},{25,16},{41,48}}
    /* Position 35 */,{{44,53,62},{28,21,14,7},{26,17,8},{42,49,56}}
    /* Position 36 */,{{45,54,63},{29,22,15},{27,18,9,0},{43,50,57}}
    /* Position 37 */,{{46,55},{30,23},{28,19,10,1},{44,51,58}}
    /* Position 38 */,{{47},{31},{29,20,11,2},{45,52,59}}
    /* Position 39 */,{{},{},{30,21,12,3},{46,53,60}}
    /* Position 40 */,{{49,58},{33,26,19,12,5},{},{}}
    /* Position 41 */,{{50,59},{34,27,20,13,6},{32},{48}}
    /* Position 42 */,{{51,60},{35,28,21,14,7},{33,24},{49,56}}
    /* Position 43 */,{{52,61},{36,29,22,15},{34,25,16},{50,57}}
    /* Position 44 */,{{53,62},{37,30,23},{35,26,17,8},{51,58}}
    /* Position 45 */,{{54,63},{38,31},{36,27,18,9,0},{52,59}}
    /* Position 46 */,{{55},{39},{37,28,19,10,1},{53,60}}
    /* Position 47 */,{{},{},{38,29,20,11,2},{54,61}}
    /* Position 48 */,{{57},{41,34,27,20,13,6},{},{}}
    /* Position 49 */,{{58},{42,35,28,21,14,7},{40},{56}}
    /* Position 50 */,{{59},{43,36,29,22,15},{41,32},{57}}
    /* Position 51 */,{{60},{44,37,30,23},{42,33,24},{58}}
    /* Position 52 */,{{61},{45,38,31},{43,34,25,16},{59}}
    /* Position 53 */,{{62},{46,39},{44,35,26,17,8},{60}}
    /* Position 54 */,{{63},{47},{45,36,27,18,9,0},{61}}
    /* Position 55 */,{{},{},{46,37,28,19,10,1},{62}}
    /* Position 56 */,{{},{49,42,35,28,21,14,7},{},{}}
    /* Position 57 */,{{},{50,43,36,29,22,15},{48},{}}
    /* Position 58 */,{{},{51,44,37,30,23},{49,40},{}}
    /* Position 59 */,{{},{52,45,38,31},{50,41,32},{}}
    /* Position 60 */,{{},{53,46,39},{51,42,33,24},{}}
    /* Position 61 */,{{},{54,47},{52,43,34,25,16},{}}
    /* Position 62 */,{{},{55},{53,44,35,26,17,8},{}}
    /* Position 63 */,{{},{},{54,45,36,27,18,9,0},{}}
    };
    private static byte Knightmoves[][][] = {
    /* Position 0 */{{17},{10},{},{},{},{},{},{}}
    /* Position 1 */,{{18},{11},{},{},{},{},{},{16}}
    /* Position 2 */,{{19},{12},{},{},{},{},{8},{17}}
    /* Position 3 */,{{20},{13},{},{},{},{},{9},{18}}
    /* Position 4 */,{{21},{14},{},{},{},{},{10},{19}}
    /* Position 5 */,{{22},{15},{},{},{},{},{11},{20}}
    /* Position 6 */,{{23},{},{},{},{},{},{12},{21}}
    /* Position 7 */,{{},{},{},{},{},{},{13},{22}}
    /* Position 8 */,{{25},{18},{2},{},{},{},{},{}}
    /* Position 9 */,{{26},{19},{3},{},{},{},{},{24}}
    /* Position 10 */,{{27},{20},{4},{},{},{0},{16},{25}}
    /* Position 11 */,{{28},{21},{5},{},{},{1},{17},{26}}
    /* Position 12 */,{{29},{22},{6},{},{},{2},{18},{27}}
    /* Position 13 */,{{30},{23},{7},{},{},{3},{19},{28}}
    /* Position 14 */,{{31},{},{},{},{},{4},{20},{29}}
    /* Position 15 */,{{},{},{},{},{},{5},{21},{30}}
    /* Position 16 */,{{33},{26},{10},{1},{},{},{},{}}
    /* Position 17 */,{{34},{27},{11},{2},{0},{},{},{32}}
    /* Position 18 */,{{35},{28},{12},{3},{1},{8},{24},{33}}
    /* Position 19 */,{{36},{29},{13},{4},{2},{9},{25},{34}}
    /* Position 20 */,{{37},{30},{14},{5},{3},{10},{26},{35}}
    /* Position 21 */,{{38},{31},{15},{6},{4},{11},{27},{36}}
    /* Position 22 */,{{39},{},{},{7},{5},{12},{28},{37}}
    /* Position 23 */,{{},{},{},{},{6},{13},{29},{38}}
    /* Position 24 */,{{41},{34},{18},{9},{},{},{},{}}
    /* Position 25 */,{{42},{35},{19},{10},{8},{},{},{40}}
    /* Position 26 */,{{43},{36},{20},{11},{9},{16},{32},{41}}
    /* Position 27 */,{{44},{37},{21},{12},{10},{17},{33},{42}}
    /* Position 28 */,{{45},{38},{22},{13},{11},{18},{34},{43}}
    /* Position 29 */,{{46},{39},{23},{14},{12},{19},{35},{44}}
    /* Position 30 */,{{47},{},{},{15},{13},{20},{36},{45}}
    /* Position 31 */,{{},{},{},{},{14},{21},{37},{46}}
    /* Position 32 */,{{49},{42},{26},{17},{},{},{},{}}
    /* Position 33 */,{{50},{43},{27},{18},{16},{},{},{48}}
    /* Position 34 */,{{51},{44},{28},{19},{17},{24},{40},{49}}
    /* Position 35 */,{{52},{45},{29},{20},{18},{25},{41},{50}}
    /* Position 36 */,{{53},{46},{30},{21},{19},{26},{42},{51}}
    /* Position 37 */,{{54},{47},{31},{22},{20},{27},{43},{52}}
    /* Position 38 */,{{55},{},{},{23},{21},{28},{44},{53}}
    /* Position 39 */,{{},{},{},{},{22},{29},{45},{54}}
    /* Position 40 */,{{57},{50},{34},{25},{},{},{},{}}
    /* Position 41 */,{{58},{51},{35},{26},{24},{},{},{56}}
    /* Position 42 */,{{59},{52},{36},{27},{25},{32},{48},{57}}
    /* Position 43 */,{{60},{53},{37},{28},{26},{33},{49},{58}}
    /* Position 44 */,{{61},{54},{38},{29},{27},{34},{50},{59}}
    /* Position 45 */,{{62},{55},{39},{30},{28},{35},{51},{60}}
    /* Position 46 */,{{63},{},{},{31},{29},{36},{52},{61}}
    /* Position 47 */,{{},{},{},{},{30},{37},{53},{62}}
    /* Position 48 */,{{},{58},{42},{33},{},{},{},{}}
    /* Position 49 */,{{},{59},{43},{34},{32},{},{},{}}
    /* Position 50 */,{{},{60},{44},{35},{33},{40},{56},{}}
    /* Position 51 */,{{},{61},{45},{36},{34},{41},{57},{}}
    /* Position 52 */,{{},{62},{46},{37},{35},{42},{58},{}}
    /* Position 53 */,{{},{63},{47},{38},{36},{43},{59},{}}
    /* Position 54 */,{{},{},{},{39},{37},{44},{60},{}}
    /* Position 55 */,{{},{},{},{},{38},{45},{61},{}}
    /* Position 56 */,{{},{},{50},{41},{},{},{},{}}
    /* Position 57 */,{{},{},{51},{42},{40},{},{},{}}
    /* Position 58 */,{{},{},{52},{43},{41},{48},{},{}}
    /* Position 59 */,{{},{},{53},{44},{42},{49},{},{}}
    /* Position 60 */,{{},{},{54},{45},{43},{50},{},{}}
    /* Position 61 */,{{},{},{55},{46},{44},{51},{},{}}
    /* Position 62 */,{{},{},{},{47},{45},{52},{},{}}
    /* Position 63 */,{{},{},{},{},{46},{53},{},{}}
    };
    private static byte Queenmoves[][][] = {
    /* Position 0 */{{8,16,24,32,40,48,56},{9,18,27,36,45,54,63},{1,2,3,4,5,6,7},{},{},{},{},{}}
    /* Position 1 */,{{9,17,25,33,41,49,57},{10,19,28,37,46,55},{2,3,4,5,6,7},{},{},{},{0},{8}}
    /* Position 2 */,{{10,18,26,34,42,50,58},{11,20,29,38,47},{3,4,5,6,7},{},{},{},{1,0},{9,16}}
    /* Position 3 */,{{11,19,27,35,43,51,59},{12,21,30,39},{4,5,6,7},{},{},{},{2,1,0},{10,17,24}}
    /* Position 4 */,{{12,20,28,36,44,52,60},{13,22,31},{5,6,7},{},{},{},{3,2,1,0},{11,18,25,32}}
    /* Position 5 */,{{13,21,29,37,45,53,61},{14,23},{6,7},{},{},{},{4,3,2,1,0},{12,19,26,33,40}}
    /* Position 6 */,{{14,22,30,38,46,54,62},{15},{7},{},{},{},{5,4,3,2,1,0},{13,20,27,34,41,48}}
    /* Position 7 */,{{15,23,31,39,47,55,63},{},{},{},{},{},{6,5,4,3,2,1,0},{14,21,28,35,42,49,56}}
    /* Position 8 */,{{16,24,32,40,48,56},{17,26,35,44,53,62},{9,10,11,12,13,14,15},{1},{0},{},{},{}}
    /* Position 9 */,{{17,25,33,41,49,57},{18,27,36,45,54,63},{10,11,12,13,14,15},{2},{1},{0},{8},{16}}
    /* Position 10 */,{{18,26,34,42,50,58},{19,28,37,46,55},{11,12,13,14,15},{3},{2},{1},{9,8},{17,24}}
    /* Position 11 */,{{19,27,35,43,51,59},{20,29,38,47},{12,13,14,15},{4},{3},{2},{10,9,8},{18,25,32}}
    /* Position 12 */,{{20,28,36,44,52,60},{21,30,39},{13,14,15},{5},{4},{3},{11,10,9,8},{19,26,33,40}}
    /* Position 13 */,{{21,29,37,45,53,61},{22,31},{14,15},{6},{5},{4},{12,11,10,9,8},{20,27,34,41,48}}
    /* Position 14 */,{{22,30,38,46,54,62},{23},{15},{7},{6},{5},{13,12,11,10,9,8},{21,28,35,42,49,56}}
    /* Position 15 */,{{23,31,39,47,55,63},{},{},{},{7},{6},{14,13,12,11,10,9,8},{22,29,36,43,50,57}}
    /* Position 16 */,{{24,32,40,48,56},{25,34,43,52,61},{17,18,19,20,21,22,23},{9,2},{8,0},{},{},{}}
    /* Position 17 */,{{25,33,41,49,57},{26,35,44,53,62},{18,19,20,21,22,23},{10,3},{9,1},{8},{16},{24}}
    /* Position 18 */,{{26,34,42,50,58},{27,36,45,54,63},{19,20,21,22,23},{11,4},{10,2},{9,0},{17,16},{25,32}}
    /* Position 19 */,{{27,35,43,51,59},{28,37,46,55},{20,21,22,23},{12,5},{11,3},{10,1},{18,17,16},{26,33,40}}
    /* Position 20 */,{{28,36,44,52,60},{29,38,47},{21,22,23},{13,6},{12,4},{11,2},{19,18,17,16},{27,34,41,48}}
    /* Position 21 */,{{29,37,45,53,61},{30,39},{22,23},{14,7},{13,5},{12,3},{20,19,18,17,16},{28,35,42,49,56}}
    /* Position 22 */,{{30,38,46,54,62},{31},{23},{15},{14,6},{13,4},{21,20,19,18,17,16},{29,36,43,50,57}}
    /* Position 23 */,{{31,39,47,55,63},{},{},{},{15,7},{14,5},{22,21,20,19,18,17,16},{30,37,44,51,58}}
    /* Position 24 */,{{32,40,48,56},{33,42,51,60},{25,26,27,28,29,30,31},{17,10,3},{16,8,0},{},{},{}}
    /* Position 25 */,{{33,41,49,57},{34,43,52,61},{26,27,28,29,30,31},{18,11,4},{17,9,1},{16},{24},{32}}
    /* Position 26 */,{{34,42,50,58},{35,44,53,62},{27,28,29,30,31},{19,12,5},{18,10,2},{17,8},{25,24},{33,40}}
    /* Position 27 */,{{35,43,51,59},{36,45,54,63},{28,29,30,31},{20,13,6},{19,11,3},{18,9,0},{26,25,24},{34,41,48}}
    /* Position 28 */,{{36,44,52,60},{37,46,55},{29,30,31},{21,14,7},{20,12,4},{19,10,1},{27,26,25,24},{35,42,49,56}}
    /* Position 29 */,{{37,45,53,61},{38,47},{30,31},{22,15},{21,13,5},{20,11,2},{28,27,26,25,24},{36,43,50,57}}
    /* Position 30 */,{{38,46,54,62},{39},{31},{23},{22,14,6},{21,12,3},{29,28,27,26,25,24},{37,44,51,58}}
    /* Position 31 */,{{39,47,55,63},{},{},{},{23,15,7},{22,13,4},{30,29,28,27,26,25,24},{38,45,52,59}}
    /* Position 32 */,{{40,48,56},{41,50,59},{33,34,35,36,37,38,39},{25,18,11,4},{24,16,8,0},{},{},{}}
    /* Position 33 */,{{41,49,57},{42,51,60},{34,35,36,37,38,39},{26,19,12,5},{25,17,9,1},{24},{32},{40}}
    /* Position 34 */,{{42,50,58},{43,52,61},{35,36,37,38,39},{27,20,13,6},{26,18,10,2},{25,16},{33,32},{41,48}}
    /* Position 35 */,{{43,51,59},{44,53,62},{36,37,38,39},{28,21,14,7},{27,19,11,3},{26,17,8},{34,33,32},{42,49,56}}
    /* Position 36 */,{{44,52,60},{45,54,63},{37,38,39},{29,22,15},{28,20,12,4},{27,18,9,0},{35,34,33,32},{43,50,57}}
    /* Position 37 */,{{45,53,61},{46,55},{38,39},{30,23},{29,21,13,5},{28,19,10,1},{36,35,34,33,32},{44,51,58}}
    /* Position 38 */,{{46,54,62},{47},{39},{31},{30,22,14,6},{29,20,11,2},{37,36,35,34,33,32},{45,52,59}}
    /* Position 39 */,{{47,55,63},{},{},{},{31,23,15,7},{30,21,12,3},{38,37,36,35,34,33,32},{46,53,60}}
    /* Position 40 */,{{48,56},{49,58},{41,42,43,44,45,46,47},{33,26,19,12,5},{32,24,16,8,0},{},{},{}}
    /* Position 41 */,{{49,57},{50,59},{42,43,44,45,46,47},{34,27,20,13,6},{33,25,17,9,1},{32},{40},{48}}
    /* Position 42 */,{{50,58},{51,60},{43,44,45,46,47},{35,28,21,14,7},{34,26,18,10,2},{33,24},{41,40},{49,56}}
    /* Position 43 */,{{51,59},{52,61},{44,45,46,47},{36,29,22,15},{35,27,19,11,3},{34,25,16},{42,41,40},{50,57}}
    /* Position 44 */,{{52,60},{53,62},{45,46,47},{37,30,23},{36,28,20,12,4},{35,26,17,8},{43,42,41,40},{51,58}}
    /* Position 45 */,{{53,61},{54,63},{46,47},{38,31},{37,29,21,13,5},{36,27,18,9,0},{44,43,42,41,40},{52,59}}
    /* Position 46 */,{{54,62},{55},{47},{39},{38,30,22,14,6},{37,28,19,10,1},{45,44,43,42,41,40},{53,60}}
    /* Position 47 */,{{55,63},{},{},{},{39,31,23,15,7},{38,29,20,11,2},{46,45,44,43,42,41,40},{54,61}}
    /* Position 48 */,{{56},{57},{49,50,51,52,53,54,55},{41,34,27,20,13,6},{40,32,24,16,8,0},{},{},{}}
    /* Position 49 */,{{57},{58},{50,51,52,53,54,55},{42,35,28,21,14,7},{41,33,25,17,9,1},{40},{48},{56}}
    /* Position 50 */,{{58},{59},{51,52,53,54,55},{43,36,29,22,15},{42,34,26,18,10,2},{41,32},{49,48},{57}}
    /* Position 51 */,{{59},{60},{52,53,54,55},{44,37,30,23},{43,35,27,19,11,3},{42,33,24},{50,49,48},{58}}
    /* Position 52 */,{{60},{61},{53,54,55},{45,38,31},{44,36,28,20,12,4},{43,34,25,16},{51,50,49,48},{59}}
    /* Position 53 */,{{61},{62},{54,55},{46,39},{45,37,29,21,13,5},{44,35,26,17,8},{52,51,50,49,48},{60}}
    /* Position 54 */,{{62},{63},{55},{47},{46,38,30,22,14,6},{45,36,27,18,9,0},{53,52,51,50,49,48},{61}}
    /* Position 55 */,{{63},{},{},{},{47,39,31,23,15,7},{46,37,28,19,10,1},{54,53,52,51,50,49,48},{62}}
    /* Position 56 */,{{},{},{57,58,59,60,61,62,63},{49,42,35,28,21,14,7},{48,40,32,24,16,8,0},{},{},{}}
    /* Position 57 */,{{},{},{58,59,60,61,62,63},{50,43,36,29,22,15},{49,41,33,25,17,9,1},{48},{56},{}}
    /* Position 58 */,{{},{},{59,60,61,62,63},{51,44,37,30,23},{50,42,34,26,18,10,2},{49,40},{57,56},{}}
    /* Position 59 */,{{},{},{60,61,62,63},{52,45,38,31},{51,43,35,27,19,11,3},{50,41,32},{58,57,56},{}}
    /* Position 60 */,{{},{},{61,62,63},{53,46,39},{52,44,36,28,20,12,4},{51,42,33,24},{59,58,57,56},{}}
    /* Position 61 */,{{},{},{62,63},{54,47},{53,45,37,29,21,13,5},{52,43,34,25,16},{60,59,58,57,56},{}}
    /* Position 62 */,{{},{},{63},{55},{54,46,38,30,22,14,6},{53,44,35,26,17,8},{61,60,59,58,57,56},{}}
    /* Position 63 */,{{},{},{},{},{55,47,39,31,23,15,7},{54,45,36,27,18,9,0},{62,61,60,59,58,57,56},{}}
    };
    private static byte Kingmoves[][][] = {
    /* Position 0 */{{8},{9},{1},{},{},{},{},{}}
    /* Position 1 */,{{9},{10},{2},{},{},{},{0},{8}}
    /* Position 2 */,{{10},{11},{3},{},{},{},{1},{9}}
    /* Position 3 */,{{11},{12},{4},{},{},{},{2},{10}}
    /* Position 4 */,{{12},{13},{5},{},{},{},{3},{11}}
    /* Position 5 */,{{13},{14},{6},{},{},{},{4},{12}}
    /* Position 6 */,{{14},{15},{7},{},{},{},{5},{13}}
    /* Position 7 */,{{15},{},{},{},{},{},{6},{14}}
    /* Position 8 */,{{16},{17},{9},{1},{0},{},{},{}}
    /* Position 9 */,{{17},{18},{10},{2},{1},{0},{8},{16}}
    /* Position 10 */,{{18},{19},{11},{3},{2},{1},{9},{17}}
    /* Position 11 */,{{19},{20},{12},{4},{3},{2},{10},{18}}
    /* Position 12 */,{{20},{21},{13},{5},{4},{3},{11},{19}}
    /* Position 13 */,{{21},{22},{14},{6},{5},{4},{12},{20}}
    /* Position 14 */,{{22},{23},{15},{7},{6},{5},{13},{21}}
    /* Position 15 */,{{23},{},{},{},{7},{6},{14},{22}}
    /* Position 16 */,{{24},{25},{17},{9},{8},{},{},{}}
    /* Position 17 */,{{25},{26},{18},{10},{9},{8},{16},{24}}
    /* Position 18 */,{{26},{27},{19},{11},{10},{9},{17},{25}}
    /* Position 19 */,{{27},{28},{20},{12},{11},{10},{18},{26}}
    /* Position 20 */,{{28},{29},{21},{13},{12},{11},{19},{27}}
    /* Position 21 */,{{29},{30},{22},{14},{13},{12},{20},{28}}
    /* Position 22 */,{{30},{31},{23},{15},{14},{13},{21},{29}}
    /* Position 23 */,{{31},{},{},{},{15},{14},{22},{30}}
    /* Position 24 */,{{32},{33},{25},{17},{16},{},{},{}}
    /* Position 25 */,{{33},{34},{26},{18},{17},{16},{24},{32}}
    /* Position 26 */,{{34},{35},{27},{19},{18},{17},{25},{33}}
    /* Position 27 */,{{35},{36},{28},{20},{19},{18},{26},{34}}
    /* Position 28 */,{{36},{37},{29},{21},{20},{19},{27},{35}}
    /* Position 29 */,{{37},{38},{30},{22},{21},{20},{28},{36}}
    /* Position 30 */,{{38},{39},{31},{23},{22},{21},{29},{37}}
    /* Position 31 */,{{39},{},{},{},{23},{22},{30},{38}}
    /* Position 32 */,{{40},{41},{33},{25},{24},{},{},{}}
    /* Position 33 */,{{41},{42},{34},{26},{25},{24},{32},{40}}
    /* Position 34 */,{{42},{43},{35},{27},{26},{25},{33},{41}}
    /* Position 35 */,{{43},{44},{36},{28},{27},{26},{34},{42}}
    /* Position 36 */,{{44},{45},{37},{29},{28},{27},{35},{43}}
    /* Position 37 */,{{45},{46},{38},{30},{29},{28},{36},{44}}
    /* Position 38 */,{{46},{47},{39},{31},{30},{29},{37},{45}}
    /* Position 39 */,{{47},{},{},{},{31},{30},{38},{46}}
    /* Position 40 */,{{48},{49},{41},{33},{32},{},{},{}}
    /* Position 41 */,{{49},{50},{42},{34},{33},{32},{40},{48}}
    /* Position 42 */,{{50},{51},{43},{35},{34},{33},{41},{49}}
    /* Position 43 */,{{51},{52},{44},{36},{35},{34},{42},{50}}
    /* Position 44 */,{{52},{53},{45},{37},{36},{35},{43},{51}}
    /* Position 45 */,{{53},{54},{46},{38},{37},{36},{44},{52}}
    /* Position 46 */,{{54},{55},{47},{39},{38},{37},{45},{53}}
    /* Position 47 */,{{55},{},{},{},{39},{38},{46},{54}}
    /* Position 48 */,{{56},{57},{49},{41},{40},{},{},{}}
    /* Position 49 */,{{57},{58},{50},{42},{41},{40},{48},{56}}
    /* Position 50 */,{{58},{59},{51},{43},{42},{41},{49},{57}}
    /* Position 51 */,{{59},{60},{52},{44},{43},{42},{50},{58}}
    /* Position 52 */,{{60},{61},{53},{45},{44},{43},{51},{59}}
    /* Position 53 */,{{61},{62},{54},{46},{45},{44},{52},{60}}
    /* Position 54 */,{{62},{63},{55},{47},{46},{45},{53},{61}}
    /* Position 55 */,{{63},{},{},{},{47},{46},{54},{62}}
    /* Position 56 */,{{},{},{57},{49},{48},{},{},{}}
    /* Position 57 */,{{},{},{58},{50},{49},{48},{56},{}}
    /* Position 58 */,{{},{},{59},{51},{50},{49},{57},{}}
    /* Position 59 */,{{},{},{60},{52},{51},{50},{58},{}}
    /* Position 60 */,{{},{},{61},{53},{52},{51},{59},{}}
    /* Position 61 */,{{},{},{62},{54},{53},{52},{60},{}}
    /* Position 62 */,{{},{},{63},{55},{54},{53},{61},{}}
    /* Position 63 */,{{},{},{},{},{55},{54},{62},{}}
    };

    // Computer pieces
    public static Piece CPawn = new Piece(ComputerPawnmoves,true,150,6 );
    public static Piece CTower =  new Piece(Towermoves,true, 850,9);
    public static Piece CBishop =  new Piece(Bishopmoves,true, 525,8);
    public static Piece CKnight =  new Piece(Knightmoves,true, 525,7);
    public static Piece CQueen =  new Piece(Queenmoves,true, 1535, 10);
    public static Piece CKing =  new Piece(Kingmoves,true,10000,11);


    // Opponent pieces
    public static Piece OPawn = new Piece(OpponentPawnmoves,false,150,0);
    public static Piece OTower =  new Piece(Towermoves,false,850,3);
    public static Piece OBishop =  new Piece(Bishopmoves,false,525,2);
    public static Piece OKnight =  new Piece(Knightmoves,false,525,1);
    public static Piece OQueen =  new Piece(Queenmoves,false,1535,4);
    public static Piece OKing =  new Piece(Kingmoves,false,10000,5);



}

